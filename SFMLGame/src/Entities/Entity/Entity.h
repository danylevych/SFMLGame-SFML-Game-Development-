#pragma once

#include "../../Scene/SceneNode/SceneNode.h"
#include <SFML/System/Vector2.hpp>


//////////////////////////////////////////////////
// \brief
//		This is the class that represents
//		the entity in our game.
// 
//////////////////////////////////////////////////
class Entity : public SceneNode
{
private:
	int32_t hitpoints;
	sf::Vector2f velocity;

public:
	Entity(int32_t hitpoints);

	// We need to set the virtual word before
	// destructor definition because we use 
	// the inheritance.
	virtual ~Entity() = default;

public:
	///////////////////////////////////////////////////////
	// \brief
	// 		Returns to user the velocity value.
	// 
	///////////////////////////////////////////////////////
	sf::Vector2f GetVelocity() const;


	///////////////////////////////////////////////////////
	// \brief
	//    These set the velocity value for the entity.
	// 
	///////////////////////////////////////////////////////
	void SetVelocity(float x, float y);
	void SetVelocity(sf::Vector2f velocity);

	///////////////////////////////////////////////////////
	// \brief
	//		      Acceleration the entity.
	// 
	///////////////////////////////////////////////////////
	void Accelerate(sf::Vector2f velocity);
	void Accelerate(float xVelocity, float yVelocity);

	///////////////////////////////////////////////////////
	// \brief
	//   Returns the hitpoints value for current entity.
	// 
	///////////////////////////////////////////////////////
	int32_t GetHitpoints() const;

	///////////////////////////////////////////////////////
	// \brief
	//   Repairs the hitpoints value on specified value.
	// 
	///////////////////////////////////////////////////////
	void Repair(int32_t points);

	///////////////////////////////////////////////////////
	// \brief
	// Substract specified number for entity's hitpoints.
	// 
	///////////////////////////////////////////////////////
	void Damage(int32_t points);

	///////////////////////////////////////////////////////
	// \brief
	// Returns true if the hitpoints of the entity reached
	// or less then zero points.
	// 
	///////////////////////////////////////////////////////
	bool IsDestroyed() const;
	
	///////////////////////////////////////////////////////
	// \brief
	//   Destroy entity by set the health point as 0.
	// 
	///////////////////////////////////////////////////////
	void Destroy();

protected:
	///////////////////////////////////////////////////////
	// \brief
	//		Overloading the updating for the instance.
	// 
	///////////////////////////////////////////////////////
	virtual void UpdateCurrent(sf::Time delta, CommandQueue& commands) override;
};

